// AlgorithmDLL.cpp : Defines the initialization routines for the DLL.
//

#include "stdafx.h"
#include "AlgorithmDLL.h"
#include "string.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


//说明：用户只需要修改：全局变量区 和 自定义仿真算法区 就可以进行算法仿真插件的开发
//其它内容请勿修改。



//=============================全局变量区==================================//

#define IMG_ROWS 128      //图像的总行数，即高
#define IMG_COLS 320      //图像的总列数，即宽
#define WHITE 255        //宏定义白
#define RED 128        //宏定义
#define BLUE 254        //宏定义
#define GREEN 100        //宏定义
#define BLACK 0          //宏定义黑
#define THRESHOLD 100    //宏定义阈值

unsigned char ImageData[IMG_ROWS][IMG_COLS];//图像数据

//=========================================================================//


char* pFileName = "中心线提取信息.txt";
FILE *pfile = fopen(pFileName,"w");
CString str="";



//添加到上位机后显示的算法名称，只需修改名称内容即可
void _stdcall AlgorithmName(char *pName)
{
	char *p = "The best";
	strcpy(pName,p);
}

// 初始化图像数据
// 该段代码不用做任何修改,作用为从上位机取数据填充到ImageData
// 就如同下位机的采集程序一样的效果.
void InitImgData(void *pData,int w,int h)
{
	int i=0,j=0;
	// 配置的图像大小与上位机的图像大小不一致，将发生错误。请自行修改宏定义的IMG_ROWS和IMG_COLS，要和上位机图像大小一致
	if (w != IMG_COLS || h != IMG_ROWS)
	{
		AfxMessageBox("图像大小设置不合理");
	}
	for (i = 0;i < IMG_ROWS;i++)
	{
		for (j = 0;j < IMG_COLS;j++)
		{
			ImageData[i][j] = *((UCHAR*)pData+i* IMG_COLS +j);
		}
	}
}


// 该段代码不用做任何修改
// 作用为：把执行算法处理后把处理后的图像数据送到上位机显示
// 上位机最终要显示的是以pData指针为首地址的数组数据
void UpdateImgData(void *pData)
{
	int i=0,j=0;
	for (i = 0;i < IMG_ROWS;i++)
	{
		for (j = 0;j < IMG_COLS;j++)
		{
			*((UCHAR*)pData+i* IMG_COLS +j) = ImageData[i][j];
		}
	}
}

void PrintDebug(CString ss)
{
	fprintf(pfile,ss);
}



//================================================自定义仿真算法区开始===========================================//

//=================================================================
//功能：图像处理仿真算法函数
//参数：w图像宽，即图像的总列数------>上位机调用时提供图像的宽度
//      h图像高，即图像的总行数------>上位机调用时提供图像的高度
//      pData 上位机调用该函数时提供显示图像缓冲区的开始指针
//================================================================



int pow[8]={1,2,4,8,16,32,64,128};                    //个人全局变量开始处
void _stdcall HandleImg(void *pData,ULONG w,ULONG h)
{
	InitImgData(pData,w,h);

	//============================用户需要添加的算法仿真代码开始=============================//
#define BOTTOM 127  //仿真算法128行 结束行的位置
	#define WIDTH 320   //图像宽度
    #define LEFTLINE 0   //图像左边界
    #define RIGHTLINE 319 //图像有边界
    #define TOP 0        //仿真算法128行 开始行的位置
	#define HEIGHT 128    //图像的行数


	unsigned char imgbuff[240*320/8];  //添加数组二维转一维的工具，解码,但注意的是 测试图像只有128行
	
	int i,j,k;


	for(j=0;j<=BOTTOM;j++)  //行扫描
   for(i=0;i<WIDTH/8;i++)  //8列每列 的扫描
   {
	 imgbuff[j*40+i]=0;     //初始全部赋值为0 目的 是方便运用 位运算 八位压缩
     for(k=0;k<8;k++)      //8位压缩
	 {
		 imgbuff[j*40+i]<<=1;  //进位
		 if(ImageData[j][i*8+k]==0)   //将 上位机 黑白表示 与 车上摄像头 统一
		 imgbuff[j*40+i]|=1;
	 }	 
   }
	  
   //================================= 工程代码直接 开始处 ======================================//
  
  
float K,B;                                 //连接二点 用的  斜率 和 截距
int Mid=160;
int rLine[HEIGHT],lLine[HEIGHT];           //存储左右边界
int MidLine[140];							//存储 中线 的数组
int lSum=BOTTOM;							// 记录 中线 数组 的 元素个数

void ArrayClear(int buff[],int x1,int x2);
void DrawLine2(unsigned char buff[],int x1,int y1,int x2,int y2);  //在原图像上补线


//...........边界平滑处理..............//
//未完成


      for(i=BOTTOM;i>=TOP;i--)              //从下面向上面搜索
	  {
		  rLine[i]=RIGHTLINE;              //初始是  280 列 和  40 列  减小视野
		  lLine[i]=LEFTLINE;
		  for(j=Mid;j<=RIGHTLINE;j++)
			  if((imgbuff[i*40+j/8]&pow[7-j%8])!=0)   //从中间向两边寻找 边线  1为黑边
			  {
				  rLine[i]=j-1;                        //记录边线位置
				  break;
			  }
		  for(j=Mid;j>=LEFTLINE;j--)
			  if((imgbuff[i*40+j/8]&pow[7-j%8])!=0)
			  {
				  lLine[i]=j+1;
				  break;
			  }
		Mid=(lLine[i]+rLine[i])/2;                      //更新中点值 方便搜索 上一行
		if(imgbuff[i*40+Mid/8]+pow[7-Mid%8]<256)
		
			{
				lSum=i;                               //此行功能暂时较为鸡肋
				    //imgbuff[i*40+lLine[i]/8]+=pow[7-lLine[i]%8];
					//imgbuff[i*40+rLine[i]/8]+=pow[7-rLine[i]%8];

			//	imgbuff[i*40+Mid/8]+=pow[7-Mid%8];   //显示中线    通过加法来显示中线  化0为 一
		    }else break;
	  
	  }

//..........................特殊图像的提前判断............................//
  int Left_Lost_Flag=0,Right_Lost_Flag=0;
  int Left_Lost_Start=-1,Left_Lost_End=-1,Right_Lost_Start=-1,Right_Lost_End=-1;
  int Left_Continuous_Flag=1,Right_Continuous_Flag=1,Left_Continuous_Delta=0,Right_Continuous_Delta=0;
  int Left_Bend_Flag=0,Right_Bend_Flag=0;
  int Left_Grad[250],Right_Grad[250];    // 一阶导数
  int Left_Grad2[250],Right_Grad2[250];  //二阶导数

  int Cross_Flag=0,Left_Cross_Flg=0,Right_Flag=0;
  int Half_Cross_Flag=0;
  int lSum2=20;
  if(lSum>20)lSum2=lSum;

  ArrayClear(Left_Grad,BOTTOM,TOP);
  ArrayClear(Left_Grad2,BOTTOM,TOP);
  ArrayClear(Right_Grad,BOTTOM,TOP);
  ArrayClear(Right_Grad2,BOTTOM,TOP);
  
  int Left_Uncontinuous_Flag=0,Right_Uncontinuous_Flag=0;
  Left_Continuous_Delta=lLine[BOTTOM-5]-lLine[BOTTOM];
  Right_Continuous_Delta=rLine[BOTTOM-5]-rLine[BOTTOM];
  
  
  if(Left_Continuous_Delta==0)Left_Continuous_Flag=0;
  if(Right_Continuous_Delta==0)Right_Continuous_Flag=0;
  for(i=BOTTOM;i>lSum+3;i--)
  {
	  //............判断 左右边界是否  单调连续
	  if(((lLine[i-3]-lLine[i])*Left_Continuous_Delta)<0 && Left_Continuous_Flag)
	  {Left_Continuous_Flag=0;}
      if(((rLine[i-3]-rLine[i])*Right_Continuous_Delta)<0 && Right_Continuous_Flag)
	  {Right_Continuous_Flag=0;}
  }
  
  Right_Lost_End=lSum;Left_Lost_End=lSum;
  for(i=BOTTOM;i>lSum;i--)
  {
	  //...........记录左丢线
	  if( lLine[i-1]==LEFTLINE && !Left_Lost_Flag){Left_Lost_Flag=1;Left_Lost_Start=i;}
	  if(lLine[i]==LEFTLINE && lLine[i-1]!=LEFTLINE && Left_Lost_Flag){Left_Lost_End=i;}
	  //...........记录右丢线
	  if( rLine[i-1]==RIGHTLINE && !Right_Lost_Flag){Right_Lost_Flag=1;Right_Lost_Start=i;}
	  if(rLine[i]==RIGHTLINE && rLine[i-1]!=RIGHTLINE&& Right_Lost_Flag){Right_Lost_End=i;}
  }


  Left_Grad[BOTTOM]=0;Right_Grad[BOTTOM]=0;
  Left_Grad2[BOTTOM]=0;Right_Grad2[BOTTOM]=0;
  for(i=BOTTOM-1;i>BOTTOM-4;i--)
  {
     Left_Grad[i]=lLine[i]-lLine[i+1];
	 Left_Grad2[i]=Left_Grad[i]-Left_Grad[i+1];

	  Right_Grad[i]=rLine[i]-rLine[i+1];
	  Right_Grad2[i]=Right_Grad[i]-Right_Grad[i+1];
  }

  for(i=BOTTOM-4;i>=lSum;i--)   //求边界线 函数 一阶导数 和 二阶导数  注意：初始的 4行 没有 导数
  {
	  Left_Grad[i]=lLine[i]-lLine[i+4];
	  Left_Grad2[i]=Left_Grad[i]-Left_Grad[i+2];
	  
	  Right_Grad[i]=rLine[i]-rLine[i+4];
	  Right_Grad2[i]=Right_Grad[i]-Right_Grad[i+2];
  }

  for(i=BOTTOM;i>lSum2;i--)  //故意 减少 最顶层一行 减少 误差,故意将最前沿 缩减20 行，来处理小 s 型弯道
  {
	  if(Left_Grad2[i]>10 || Left_Grad2[i] <-10)Left_Uncontinuous_Flag=1;
      if(Right_Grad2[i]>10 || Right_Grad2[i] <-10)Right_Uncontinuous_Flag=1;
  }
  // 判断 是否是出现十字
  if(Left_Uncontinuous_Flag && Right_Uncontinuous_Flag &&(Left_Lost_Flag || Right_Lost_Flag) )Cross_Flag=1;
  if(!Left_Continuous_Flag && !Left_Continuous_Flag &&(Left_Lost_Flag && (Left_Lost_Start-Left_Lost_End)>40 )||(Right_Lost_Flag &&(Right_Lost_Start-Right_Lost_End)>40))Cross_Flag=1;







//*****************************补十字用的代码***********************************//
int ex[4],ey[4];
ex[0]=0;ex[1]=0;ex[2]=0;ex[3]=0;  //记录4个点坐标用的 数组
int t=0;
int pUp,nUp=0;    //寻找上面两个点用的 记录上层的变量
int delta=0;          //寻找拐点用的 增量增减记录变量



//**********寻找左边二个点
  if(Cross_Flag)  // 十字识别 的启发条件
  {
    
	pUp=BOTTOM;
for(i=lLine[BOTTOM];i<=RIGHTLINE;i++) //寻找 左下点   竖着搜跳点
	{
		for(j=BOTTOM;j>=TOP;j--)
			if((imgbuff[j*40+i/8]&pow[7-i%8])!=0)
			{
			 nUp=j; 
             break;			 
			}
	if(pUp-nUp-delta>10  && pUp!=-1)				//当两次 上边界距离相差 超过10 即为找到 跳点 记录下来 退出寻找
	{
		ex[0]=pUp;
		ey[0]=i-1;
		t++;
		break;	
	}
	pUp=nUp;
	}
	
	

        //***************如果找到左下点就找左上点
	if(t==1){										//当找到了下面的点  就开始寻找上面的跳点
    nUp=0;
	pUp=-1;
	delta=0;
 Mid=ex[0]-10;
	for(i=ey[0];i<=RIGHTLINE;i+=3)					//沿着 下面跳点 的上方 向 右部分寻找 上面的跳点   缺点：当十字非常偏 上面的跳点可能在下面 跳点的偏左边 一点
	{
		
		for(j=Mid;j>=0;j--)
			if((imgbuff[j*40+i/8]&pow[7-i%8])!=0)
			{
			 nUp=j; 
             break;			 
			}
    
	if(pUp!=-1&&pUp-nUp-delta>1)
	{
		ex[3]=pUp;
		ey[3]=i-1;
		++t;
		break;
		
	}
	if(pUp!=-1)delta=pUp-nUp;
	pUp=nUp;
	Mid=nUp+10;
    	  if((imgbuff[Mid*40+i/8]&pow[7-i%8])!=0)break;            // 保险装置 ，防止搜进边界里面去了  对于 解决 误判十字 有80%的作用 
	}

    if(t==2)DrawLine2(imgbuff,ex[0],ey[0],ex[3],ey[3]);
	}
	





		//**********寻找右边二个点

	t=0;
	nUp=0;
	pUp=BOTTOM;
//	if(rLine[BOTTOM]!=RIGHTLINE)
	for(i=rLine[BOTTOM];i>=LEFTLINE;i--) //寻找 右下点
	{
		for(j=BOTTOM;j>=0;j--)
			if((imgbuff[j*40+i/8]&pow[7-i%8])!=0)
			{
			 nUp=j; 
             break;			 
			}
	if(pUp-nUp>10)
	{
		ex[1]=pUp;
		ey[1]=i-1;
		t++;
		break;	
	}
	
	pUp=nUp;
	}
	


	            //..........如果找到右下的点 就找 右上的点

	if(t==1)
	{
 
	Mid=ex[1]-10;
	pUp=-1;
	nUp=0;
	delta=0;
 for(i=ey[1];i>=LEFTLINE;i-=3)
 {
	 for(j=Mid;j>0;j--)
		 if((imgbuff[j*40+i/8]&pow[7-i%8])!=0)
		 {
			nUp=j;
            break;			
		 }
		 
	 
 		 if(pUp!=-1&&pUp-nUp-delta>1)
		 {
			 ex[2]=pUp;
			 ey[2]=i;
			 ++t;
			 break;
		 }
		 if(pUp!=-1)delta=pUp-nUp;
		 pUp=nUp;
		 Mid=nUp+10;
         if((imgbuff[Mid*40+i/8]&pow[7-i%8])!=0)break;    
 }

		
		
	if(t==2)DrawLine2(imgbuff,ex[1],ey[1],ex[2],ey[2]);  //在原图上补全十字
	}

    } // 总的 十字代码括号



//.................. 中线重新搜索...................
	Mid=(LEFTLINE+RIGHTLINE)/2;
      for(i=BOTTOM;i>=TOP;i--)              //从下面向上面搜索
	  {
		  rLine[i]=RIGHTLINE;              //初始是  280 列 和  40 列  减小视野
		  lLine[i]=LEFTLINE;
		  for(j=Mid;j<=RIGHTLINE;j++)
			  if((imgbuff[i*40+j/8]&pow[7-j%8])!=0)   //从中间向两边寻找 边线  1为黑边
			  {
				  rLine[i]=j-1;                        //记录边线位置
				  break;
			  }
		  for(j=Mid;j>=LEFTLINE;j--)
			  if((imgbuff[i*40+j/8]&pow[7-j%8])!=0)
			  {
				  lLine[i]=j+1;
				  break;
			  }
		                 //更新中点值 方便搜索 上一行
		
		if(imgbuff[i*40+Mid/8]+pow[7-Mid%8]<256)
			{
				lSum=i;                               //当 上面为 黑边的时候跳出 寻中线
				Mid=(lLine[i]+rLine[i])/2;
				MidLine[i]=Mid;
				  //  imgbuff[i*40+lLine[i]/8]+=pow[7-lLine[i]%8];
				//	imgbuff[i*40+rLine[i]/8]+=pow[7-rLine[i]%8];

//				imgbuff[i*40+Mid/8]+=pow[7-Mid%8];   //显示中线    通过加法来显示中线  化0为 一
		    }else break;
	  

	  } 
	  
	  
		// 弯道平滑处理  补弯道    实质上很不完善， 对于掉线较为严重的弯道没有用
		//...........................补弯道用得代码.........................................//
		void DrawLine(int buff[],int x1,int y1,int x2,int y2);
		if(Left_Continuous_Flag && Right_Lost_Flag)//如果左连续 并且 右丢线 说明进入了 右弯道
		{
			DrawLine(MidLine,Right_Lost_Start,MidLine[Right_Lost_Start],lSum,RIGHTLINE);
		}
		if(Right_Continuous_Flag && Left_Lost_Flag)
		{
			DrawLine(MidLine,Left_Lost_Start,MidLine[Left_Lost_Start],lSum,LEFTLINE);
		}


  





																		//在显示屏幕上显示 中线
  for(i=BOTTOM;i>=lSum;i--)
  {
    if(imgbuff[i*40+MidLine[i]/8]+pow[7-MidLine[i]%8]<256)
			{


				imgbuff[i*40+MidLine[i]/8]+=pow[7-MidLine[i]%8];   //显示中线    通过加法来显示中线  化0为 一
		    }
  }

     //================================= 工程代码直接 结束处 ======================================//
	for(j=0;j<=BOTTOM;j++)
   for(i=0;i<WIDTH/8;i++)
   {
     for(k=7;k>=0;k--)
	 {
		 if((imgbuff[j*40+i]&pow[k])==0)
                    ImageData[j][i*8+7-k]=WHITE;
        else
			ImageData[j][i*8+7-k]=BLACK;
	 }		 
   }  


   //============================= 特殊标志显示处


      for(i=0;i<4;i++)
	   ImageData[ex[i]][ey[i]]=RED;

	  for(i=LEFTLINE;i<=RIGHTLINE;i++)
	  {
		  ImageData[TOP+80][i]=98;
		  ImageData[lSum][i]=98;
	  }
	  for(i=BOTTOM;i>=lSum;i--)
	  {
		  ImageData[i][lLine[i]]=BLUE;
		  ImageData[i][rLine[i]]=GREEN;
		  
	  }
	  str.Format("Left_Continuous_Flag=%d\n\r",Left_Continuous_Flag);PrintDebug(str);
	  str.Format("Right_Continuous_Flag=%d\n\r",Right_Continuous_Flag);PrintDebug(str);

	  str.Format("Left_Uncontinuous_Flag=%d\n\r",Left_Uncontinuous_Flag);PrintDebug(str);
	  str.Format("Right_Uncontinuous_Flag=%d\n\r",Right_Uncontinuous_Flag);PrintDebug(str);

	  str.Format("Left_Lost_Flag=%d\n\r",Left_Lost_Flag);PrintDebug(str);
	  str.Format("Right_Lost_Flag=%d\n\r",Right_Lost_Flag);PrintDebug(str);
	  
	  for(i=BOTTOM;i>=lSum;i--)   // 显示 左导数 值 
	  {
		  str.Format("Left_Grad[%d]=%d\n\r",i,Left_Grad[i]);
		  PrintDebug(str);
	  }
	     str.Format("\n\n");
		 PrintDebug(str);

	  for(i=BOTTOM;i>=lSum;i--)
	  {
		  str.Format("Left_Grad2[%d]=%d\n\r",i,Left_Grad2[i]);
		  PrintDebug(str);
	  }
		  

	 /* for(i=BOTTOM;i>=lSum;i--)  //显示右导数值
	  {
		  str.Format("Right_Grad[%d]=%d\n\r",i,Right_Grad[i]);
		  PrintDebug(str);
	  }
	     str.Format("\n\r");
		 PrintDebug(str);

	  for(i=BOTTOM;i>=lSum;i--)
	  {
		  str.Format("Right_Grad2[%d]=%d\n\r",i,Right_Grad2[i]);
		  PrintDebug(str);
	  }*/

	//============================用户需要的仿真算法代码结束================================//
	UpdateImgData(pData);
	fclose(pfile);
}

//================================================自定义仿真算法区结束===========================================//
void DrawLine(int buff[],int x1,int y1,int x2,int y2)  //在 中线上补线
{
	float K,B;
	int i;
	K=(y1-y2)*1.0/(x1-x2);
	B=y1-K*x1;

	for(i=x2;i<=x1;i++)
		buff[i]=K*i+B;
}

void DrawLine2(unsigned char buff[],int x1,int y1,int x2,int y2)  //在原图像上补线
{
	float K,B;
	int i,y;
	K=(y1-y2)*1.0/(x1-x2);
	B=y1-K*x1;
	
	for(i=x2;i<=x1;i++)
	{
		y=K*i+B;
		if(buff[i*40+y/8]+pow[7-y%8]<256)buff[i*40+y/8]+=pow[7-y%8];
	}
	
}

void ArrayClear(int buff[],int x1,int x2)
{
	int i;

	for(i=x1;i>=x2;i--)
		buff[i]=0;
}
